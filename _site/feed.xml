<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://madsravn.dk/feed.xml" rel="self" type="application/atom+xml" /><link href="https://madsravn.dk/" rel="alternate" type="text/html" /><updated>2021-12-13T13:05:50+01:00</updated><id>https://madsravn.dk/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Using liquid-rust with serde</title><link href="https://madsravn.dk/posts/using-liquid-rust-with-serde" rel="alternate" type="text/html" title="Using liquid-rust with serde" /><published>2021-12-13T00:00:00+01:00</published><updated>2021-12-13T00:00:00+01:00</updated><id>https://madsravn.dk/posts/using-liquid-rust-with-serde</id><content type="html" xml:base="https://madsravn.dk/posts/using-liquid-rust-with-serde">&lt;p&gt;I have been running Jekyll for 9 years now. I wrote about it &lt;a href=&quot;first-post.html&quot;&gt;in this post&lt;/a&gt;. At this point, my needs and patience have outgrown Jekyll. There is a few features that I miss and there is some annoyance that comes with running Ruby, I feel.&lt;/p&gt;

&lt;p&gt;I have decided to write my own static site generator. I need something that I control - something that bends to my will. But because I am lazy, I will keep the content structure of Jekyll. This way I can just run my new static site generator on the exact same content that I already have. It means that I have to use markdown for my content and it means that I have to use liquid as my templating system. And I have no problem with this.&lt;/p&gt;

&lt;p&gt;It was easy to find a markdown compiler for the project. I chose pulldown-cmark. It seems easy to use and passes all the compilations of my current markdown files. After looking for a good liquid crate, I fell upon &lt;a href=&quot;https://github.com/cobalt-org/liquid-rust&quot;&gt;liquid-rust&lt;/a&gt;. It seems to be written for cobalt, which is a static site generator written in Rust. And it was damn easy to get started on. Until I hit my first speed bump. How do I put non-trivial objects into the templating engine?&lt;/p&gt;

&lt;p&gt;I have this piece liquid code in my html for my posts:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;content&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;listing&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/posts/using-liquid-rust-with-serde&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Using liquid-rust with serde&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;December 13, 2021&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/posts/created-my-first-keyboard&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Created my first keyboard from scratch&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;March  9, 2021&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/posts/2020-My-Year-In-Books&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;My year in books, 2020&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;December 31, 2020&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/posts/enabling-latex-with-jekyll&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Enabling LaTeX rendering with jekyll&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;November 10, 2020&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/posts/contributing-to-clang&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Contributing to Clang&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;June 20, 2017&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/posts/meeting-cpp-trip-report&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Meeting C++ trip report&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;November 22, 2016&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/posts/master-thesis-done-lessons-learned&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Master thesis done - lessons learned&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;November 21, 2015&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/posts/what-is-better-xbox-or-playstation&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;What is better - Xbox One or Playstation 4?&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;November 19, 2013&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/posts/simple-image-processing-with-cuda&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Simple image processing with CUDA&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;October 27, 2013&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/posts/final-handin-for-rendalg&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Improving performance with packet tracing and other methods&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;April 10, 2013&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/posts/chess-summary-for-january&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Chess summary for January&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;January 31, 2013&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/posts/raspberry-with-slow-external-hard-drive&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Raspberry Pi with slow external hard drive&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;January  1, 2013&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/posts/music-or-audiobooks-or&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Music or audiobooks or ...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;December 13, 2012&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/posts/first-post&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;First post with Jekyll&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;left&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;October  7, 2012&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;hr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Problem was just that all the examples I could find showed how to inject a very simple structure into the templating engine. The example is showed below and is showing to how put in a primitive type.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;let template = liquid::ParserBuilder::with_stdlib()
  .build().unwrap()
  .parse(&quot;Liquid! -2&quot;).unwrap();

let mut globals = liquid::object!({
  &quot;num&quot;: 4f64
});

let output = template.render(&lt;span class=&quot;ni&quot;&gt;&amp;amp;globals).unwrap();&lt;/span&gt;
assert_eq!(output, &quot;Liquid! 2&quot;.to_string());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;My goal is just to inject a complex type which holds a list of &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;post&lt;/code&gt; and where each post object holds &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;url&lt;/code&gt;, &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;title&lt;/code&gt; and &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;date&lt;/code&gt;. I scoured the internet for a way of doing this and came up empty. I found the author of the crate was on the official Rust Discord and I introduced myself and my problem. And he showed me the simple solution. Use serde.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;use serde::{Serialize, Deserialize};

#[derive(Serialize, Deserialize, Debug)]
struct Post {
  title: String,
  url: String,
  date: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct Posts {
  posts: Vec&lt;span class=&quot;nt&quot;&gt;&amp;lt;Post&amp;gt;&lt;/span&gt;,
}

#[derive(Serialize, Deserialize, Debug)]
struct Globals {
  site: Posts,
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now with complex data structure described in serde, it was as easy as creating the objects and using them as input to the templating engine:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;let site = Globals {
    site: p3
};

let index = fs::read_to_string(&quot;_build/index.html&quot;).expect(&quot;Should be able to read the index file&quot;);
let template = liquid::ParserBuilder::with_stdlib()
       .build().unwrap()
       .parse(&lt;span class=&quot;ni&quot;&gt;&amp;amp;index).unwrap();&lt;/span&gt;
let globals = liquid::to_object(&lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;site).expect(&quot;Should be able to parse&quot;);
    
let output = template.render(&lt;span class=&quot;ni&quot;&gt;&amp;amp;globals).unwrap();&lt;/span&gt;
println!(&quot;index: {}&quot;, output);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It took me some time to find the solution - or find the person who could give me the solution. But now that it is here, it seems so easy. And with with that, I can finalize my static site generator.&lt;/p&gt;</content><author><name></name></author><summary type="html">I have been running Jekyll for 9 years now. I wrote about it in this post. At this point, my needs and patience have outgrown Jekyll. There is a few features that I miss and there is some annoyance that comes with running Ruby, I feel.</summary></entry><entry><title type="html">Created my first keyboard from scratch</title><link href="https://madsravn.dk/posts/created-my-first-keyboard" rel="alternate" type="text/html" title="Created my first keyboard from scratch" /><published>2021-03-09T00:00:00+01:00</published><updated>2021-03-09T00:00:00+01:00</updated><id>https://madsravn.dk/posts/created-my-first-keyboard</id><content type="html" xml:base="https://madsravn.dk/posts/created-my-first-keyboard">&lt;h2 id=&quot;the-past&quot;&gt;The Past&lt;/h2&gt;

&lt;p&gt;I love mechanical keyboards. I frequent &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;r/mechanicalkeyboards&lt;/code&gt; and &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;#mechboards&lt;/code&gt;. I probably have a few keyboards too many (as if).&lt;/p&gt;

&lt;p&gt;I started out by buying a Coolermaster Quickfire Rapid-i with brown switches. Going from a regular keyboard to a mechanical was like a dream come true. I dream that I didn’t even know I had. A few years ago I started getting into electronics and soldering. I bought a few mechanical keyboard kits. After that I have created a few open source keyboards - people giving away their hard work by putting the design files freely available on Github. My latest keyboard is an &lt;a href=&quot;https://github.com/omkbd/ErgoDash/&quot;&gt;ErgoDash&lt;/a&gt; - a nice split keyboard with lots of features.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/image.jpg&quot; width=&quot;400&quot; height=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;now&quot;&gt;Now&lt;/h2&gt;

&lt;p&gt;I recently purchased a 3D printer. A Prusa i3 MK3S+. I never thought I would own a 3D printer, but here we are. It seems like an excellent printer with nice support from the official slicer software. I found that Fusion 360 is pretty easy to learn for people who have never done 3D modelling before. I wanted to create a small macro pad for 2x2 LEGO bricks. I also wanted the possibility to build bricks on top of multiple keys, so I needed to design a keyboard where the keys had the correct distance between them. I went to the drawing board:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/ODNiEeN.jpeg&quot; width=&quot;300&quot; height=&quot;400&quot; /&gt; &lt;img src=&quot;../images/QHoj4Lv.jpeg&quot; width=&quot;300&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When I had printed the top and bottom of the new keyboard, I started soldering. For most of my own keyboards I have used the Pro Micro. It’s a cheap and well tested dev board which does the job! I had never handwired a keyboard before, so that was a fun experience. I am using &lt;a href=&quot;https://beta.docs.qmk.fm/&quot;&gt;QMK&lt;/a&gt; for the firmware on the Pro Micro and I had to figure out how to create my own keyboard and layout. I used the &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;DIRECT_PINS&lt;/code&gt; mode because I have so few keys on my board that I do not need to create a matrix.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/jSB2xYc.jpeg&quot; width=&quot;300&quot; height=&quot;400&quot; /&gt; &lt;img src=&quot;../images/eS5NsIT.jpeg&quot; width=&quot;300&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once assembled and flashed, it was time to test. It works fine. Now I just need to find a purpose for it. It looks fine and I imagine that it can be used a gimmick keyboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/IMG_20210308_092718.jpg&quot; width=&quot;300&quot; height=&quot;400&quot; /&gt; &lt;img src=&quot;../images/IMG_20210309_090056.jpg&quot; width=&quot;300&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The Future&lt;/h2&gt;

&lt;p&gt;It’s fun to design your own keyboard. I had never thought I would do it. But now that I have done it, I want to make more. And I want to make bigger keyboards. Maybe even keyboards with the entire alphabet on them. The only limitation I have right now is the printing surface on the Prusa printer.&lt;/p&gt;</content><author><name></name></author><summary type="html">The Past</summary></entry><entry><title type="html">My year in books, 2020</title><link href="https://madsravn.dk/posts/2020-My-Year-In-Books" rel="alternate" type="text/html" title="My year in books, 2020" /><published>2020-12-31T00:00:00+01:00</published><updated>2020-12-31T00:00:00+01:00</updated><id>https://madsravn.dk/posts/2020-My-Year-In-Books</id><content type="html" xml:base="https://madsravn.dk/posts/2020-My-Year-In-Books">&lt;p&gt;Inspired by threads on Reddit, this is &lt;em&gt;My year in books, 2020&lt;/em&gt;. I listen to most of my books. Or I listen to all of my fiction books, at least. I listen to books mostly when driving to and from work, going for a walk, going to sleep or doing menial tasks around the house or garden.&lt;/p&gt;

&lt;p&gt;The genres I prefer are mostly fantasy, science fiction and crime. I listened to 46 books in 2020.&lt;/p&gt;

&lt;h3 id=&quot;fantasy&quot;&gt;Fantasy&lt;/h3&gt;

&lt;p&gt;What really stood out, fantasy-wise, for me in the books I listened to in 2020 was &lt;em&gt;The Highwayman&lt;/em&gt; by R.A. Salvatore, &lt;em&gt;Kings of the Wylde&lt;/em&gt; by Nicholas Eames, &lt;em&gt;The Licanius Trilogy&lt;/em&gt; by James Islington and &lt;em&gt;The Rage of Dragons&lt;/em&gt; by Evan Winter.&lt;/p&gt;

&lt;p&gt;A special shout out to Joe Abercrombie for the second book in the &lt;em&gt;Age of Madness Trilogy&lt;/em&gt;. He really delivers! His books also have great re-read value. If possible, his writing style keeps improving and surprising. In the middle of combat he changes the point of view from one fighter to his opponent giving a broader feel of the fight. He has a light sarcastic tone. I love the world and the story, but his style keeps me interested!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Kings of the Wylde&lt;/em&gt; was also a very good story. There was something nostalgic about these old friends getting back together and fighting again. The world is also very interesting where the new generation has a whole new idea of what a band is.&lt;/p&gt;

&lt;p&gt;This category’s big let down was the &lt;em&gt;Ascendant&lt;/em&gt; trilogy by Craig Alanson. Nobody out there can tell me that they don’t like Tim Gerard Reynolds. He is in my top 5 of narrators and I would probably listen to a book just because of him. However, this book was a giant let down. It is misunderstanding after misunderstanding. Nobody learns from their mistakes. The main character is the strongest wizard the world has ever seen and we get to see him “fight” with magic 2 times in a trilogy of 46+ hours.&lt;/p&gt;

&lt;h3 id=&quot;science-fiction&quot;&gt;Science Fiction&lt;/h3&gt;

&lt;p&gt;This category also contains some letdowns. I read &lt;em&gt;The Foundation Trilogy&lt;/em&gt; by Isaac Asimov. I love the romantic idea that Asimov have about the future - but in the end his series was quite boring. I felt you never really got to learn much about the characters because we skip so much time.&lt;/p&gt;

&lt;p&gt;Timothy Zahn with a new Thrawn book - who wouldn’t be super hyped for the first instalment of the new &lt;em&gt;Thrawn Ascendency&lt;/em&gt;? I think I was too hyped because Thrawn already have a great trilogy in the &lt;em&gt;Thrawn Trilogy&lt;/em&gt; and this really didn’t do it justice! It was with a sad heart that I realized I probably will not listen to book two and three in this trilogy.&lt;/p&gt;</content><author><name></name></author><summary type="html">Inspired by threads on Reddit, this is My year in books, 2020. I listen to most of my books. Or I listen to all of my fiction books, at least. I listen to books mostly when driving to and from work, going for a walk, going to sleep or doing menial tasks around the house or garden.</summary></entry><entry><title type="html">Enabling LaTeX rendering with jekyll</title><link href="https://madsravn.dk/posts/enabling-latex-with-jekyll" rel="alternate" type="text/html" title="Enabling LaTeX rendering with jekyll" /><published>2020-11-10T00:00:00+01:00</published><updated>2020-11-10T00:00:00+01:00</updated><id>https://madsravn.dk/posts/enabling-latex-with-jekyll</id><content type="html" xml:base="https://madsravn.dk/posts/enabling-latex-with-jekyll">&lt;p&gt;I was looking for a good way render some LaTeX math while writing blog posts with jekyll. I couldn’t find a jekyll plugin which would allow me to inline LaTeX equation and have them rendered client-side. I ended up finding &lt;a href=&quot;https://www.mathjax.org/&quot;&gt;mathjax.org&lt;/a&gt;. It is an easy solution - it is as simple as adding these two lines to my layout document:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://polyfill.io/v3/polyfill.min.js?features=es6&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MathJax-script&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After adding these two lines it gets as simple as just writing your LaTeX equation within &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;$$...$$&lt;/code&gt;. It’s pretty straight forward plug’n’play compared to some other solutions. And it also works just as well for other blog solutions and static site generators. It was just jekyll I was looking for a solution for.&lt;/p&gt;

&lt;p&gt;As an example, here is a rendered equation from my thesis: &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;$$\sum\limits_{i=1}^{\lg_B \lg n} \frac{\lg n}{B^i} \cdot \mathcal{O}(B^i) = \mathcal{O}(\lg n \cdot \lg_B \lg n)$$&lt;/code&gt;&lt;/p&gt;

\[\sum\limits_{i=1}^{\lg_B \lg n} \frac{\lg n}{B^i} \cdot \mathcal{O}(B^i) = \mathcal{O}(\lg n \cdot \lg_B \lg n)\]</content><author><name></name></author><summary type="html">I was looking for a good way render some LaTeX math while writing blog posts with jekyll. I couldn’t find a jekyll plugin which would allow me to inline LaTeX equation and have them rendered client-side. I ended up finding mathjax.org. It is an easy solution - it is as simple as adding these two lines to my layout document:</summary></entry><entry><title type="html">Contributing to Clang</title><link href="https://madsravn.dk/posts/contributing-to-clang" rel="alternate" type="text/html" title="Contributing to Clang" /><published>2017-06-20T00:00:00+02:00</published><updated>2017-06-20T00:00:00+02:00</updated><id>https://madsravn.dk/posts/contributing-to-clang</id><content type="html" xml:base="https://madsravn.dk/posts/contributing-to-clang">&lt;p&gt;A year or so ago I started contributing code to Clang. For those of you who doesn’t know what &lt;a href=&quot;https://clang.llvm.org/&quot;&gt;Clang&lt;/a&gt; is; it is a C and C++ front-end for LLVM. In short, a C++ compiler. I have mostly been doing work on &lt;a href=&quot;https://clang.llvm.org/extra/clang-tidy/&quot;&gt;Clang-Tidy&lt;/a&gt; which is a Clang-based C++ linter. It can help you find errors, enforce coding guidelines or modernize your project. it is a very helpful tool which can be an effective part of your tool chain. It is also very easy to extend Clang-Tidy with your own checks - and it also easy to have this code accepted into the official Clang project.&lt;/p&gt;

&lt;p&gt;So if you are looking for a fun open source project to contribute to, look no further. In this post I will quickly explain the few steps you need to follow in order to extend Clang-Tidy and have it accepted into the Clang project.&lt;/p&gt;

&lt;h2 id=&quot;get-the-code&quot;&gt;Get the code!&lt;/h2&gt;

&lt;p&gt;First you need to get the source code for the project. The process is described on the &lt;a href=&quot;https://clang.llvm.org/get_started.html&quot;&gt;getting started page&lt;/a&gt;. Clang-Tidy is located in the clang-tools-extra repository. So you will have to check out llvm first, then clang and finally clang-tools-extra.&lt;/p&gt;

&lt;h2 id=&quot;time-for-some-code&quot;&gt;Time for some code&lt;/h2&gt;
&lt;p&gt;Once you have checked the code out, you want to prepare the project by running CMake to get your build environment up and running. Once you have done that and opened the project, I can recommend that you &lt;a href=&quot;https://clang.llvm.org/extra/clang-tidy/#writing-a-clang-tidy-check&quot;&gt;read this post&lt;/a&gt; about writing a clang-tidy check. Pay attention to the tools being used. In particular, &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;add_new_check.py&lt;/code&gt;. Using this tool will create the files you need in the right places and add them to the CMake files of the clang-tools-extra project.&lt;/p&gt;

&lt;h2 id=&quot;done-coding-get-some-comments&quot;&gt;Done coding? Get some comments!&lt;/h2&gt;
&lt;p&gt;When you are done coding - when you have made your own Clang-tidy check and some tests for it - you are going to put the changes in for code review. This is done by using Phabricator. Take a look at the &lt;a href=&quot;https://llvm.org/docs/Phabricator.html&quot;&gt;LLVM page for Phabricator&lt;/a&gt; to see how you create a ‘Differential’ for your patch. If it is your first time creating code for the LLVM project there are bound to be some comments. Just take all the help you can get and be patient.&lt;/p&gt;

&lt;h2 id=&quot;closing-statement&quot;&gt;Closing statement&lt;/h2&gt;
&lt;p&gt;I think the Clang project is super fun to work on. The people I have met through my contributions are super friendly and smart. They are willing to help out a lot. If you want to meet some folk, just drop by the IRC channel. It is at #llvm @ irc.oftc.net. If you want to reach out, my nick is mfrstar.&lt;/p&gt;</content><author><name></name></author><summary type="html">A year or so ago I started contributing code to Clang. For those of you who doesn’t know what Clang is; it is a C and C++ front-end for LLVM. In short, a C++ compiler. I have mostly been doing work on Clang-Tidy which is a Clang-based C++ linter. It can help you find errors, enforce coding guidelines or modernize your project. it is a very helpful tool which can be an effective part of your tool chain. It is also very easy to extend Clang-Tidy with your own checks - and it also easy to have this code accepted into the official Clang project.</summary></entry><entry><title type="html">Meeting C++ trip report</title><link href="https://madsravn.dk/posts/meeting-cpp-trip-report" rel="alternate" type="text/html" title="Meeting C++ trip report" /><published>2016-11-22T00:00:00+01:00</published><updated>2016-11-22T00:00:00+01:00</updated><id>https://madsravn.dk/posts/meeting-cpp-trip-report</id><content type="html" xml:base="https://madsravn.dk/posts/meeting-cpp-trip-report">&lt;p&gt;Last week I attended my first ever C++ conference. It was the Meeting C++ conference in Berlin. The conference was very nicely planned with some good speakers and good topics. There were only a few minor details which was inconvinient. Below I will try to express some thoughts about the different talks I saw and about the conference in general.&lt;/p&gt;

&lt;h2 id=&quot;the-keynote&quot;&gt;The Keynote&lt;/h2&gt;

&lt;p&gt;The keynote this year was presented by Bjarne Stroustrup. I have seen Bjarne a few times before and it never gets boring. He talked about what his thoughts were when he created C++ and how he is trying to stay true to those thoughts going into newer versions of C++. As always he talked expressing intent - both for the readers and the compiler. He then showed what kind of features we can expect from C++17 and what he hopes will come with C++2z. I am always impressed at the questions he gets and how he answers them. He is getting all kind of weird and technical questions and he answers them all in a very calm manner. There was one question he didn’t want to answer though, which was about which languages he likes and dislikes.&lt;/p&gt;

&lt;h2 id=&quot;all-your-cache-is-belong-to-us&quot;&gt;All your cache is belong to us&lt;/h2&gt;

&lt;p&gt;I also saw a talk about caches by Timur Doumler. It was very good. He had some excellent points accompanied by good figures and thought-out experiments. I never thought the subject of caching could become fun and interesting, but Doumler actually nailed it. Unfortunately, this presentation did not allow for questions due to time being short. This was the one single talk I had a question for. He also showed snippets of code as to how you would write better code if you are interested in cache friendliness.&lt;/p&gt;

&lt;h2 id=&quot;a-million-lines-of-code&quot;&gt;A million lines of code&lt;/h2&gt;

&lt;p&gt;Next on the schedule was Peter Bindels from Tomtom talking about their own software. He talked about how they had had problems with way too many lines of codes. He presented some guidelines for how to handle it and talked about a tool Tomtom had developed to show internal code dependencies. This tool had been very successfull in helping them make their code more clear and expressive. He mentioned that their tool could find code dependency cycles and how you did want to have these. I found this talk very good. Peter was very engaging and talked about practical experience which is easy to convert into your own work.&lt;/p&gt;

&lt;h2 id=&quot;a-little-dash-of-functional&quot;&gt;A little dash of functional&lt;/h2&gt;

&lt;p&gt;The last talk of the day was Phil Nash with his ‘Functional C++ for Fun and Profit’. I was a little vary when joining this talk. Sometimes when people talk about functional C++ it just becomes a garbage can of metaprogramming. Nash had none of this. His talk was concise with some very nice points from his practical experience. He showed how to express intent with functional programming and how to strive towards the idea of purity. He talked a little about some persistent data structure before showing how to make some nice functional programming with lambda expressions and &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;std::optional&lt;/code&gt;. It was very intereting. This was easily the best talk of the day for me.&lt;/p&gt;

&lt;h2 id=&quot;party-time&quot;&gt;Party time!&lt;/h2&gt;

&lt;p&gt;At this point we got some food. It was OK - nothing too good. And there was no beer with the meal! However, after the meal there was a C++ quiz by conan.io. It was very fun to try. We did OK, I think we got 5-6th place or something. After the quiz, at 9:00 PM the beer finally arrived. I went around, drank some beer and talked to some interesting people! This was also one of the best things about the conference: just talking to people about stuff. Too bad we only had one evening to do that. But next years Meeting C++ with one more day of conference will be better!&lt;/p&gt;

&lt;h2 id=&quot;saturday-morning-functional-programming&quot;&gt;Saturday morning functional programming&lt;/h2&gt;

&lt;p&gt;First thing on the schedule saturday was ‘Functional Reactive Programming in C++’ by Ivan Cukic. I have to give it to Cukic for bringing a very relevant and easy to use presentation! Again, I had expected some metaprogramming, but it was good on the conceptual level as to how you want to explore funcation reactive programming! Was an excellent presentation. Cukic also shared free copies of his future book on this exact subject!&lt;/p&gt;

&lt;h2 id=&quot;static-analysis&quot;&gt;Static analysis!&lt;/h2&gt;

&lt;p&gt;Next up was Gabor Horvath with his talk about static analysis. Gabor is a PhD student with subject in static analysis, so this talk was a little academic. But it was indeed very interesting. He had good examples and nice slides on the subject. When the presentation was over I was much more curious about static analysis and wanted to look more into it. This was also one of my favorite talks of the conference.&lt;/p&gt;

&lt;h2 id=&quot;the-end&quot;&gt;The end&lt;/h2&gt;
&lt;p&gt;Unfortunately I didn’t get to see the closing keynote due to my travel plans. I had to get home. But that was OK - I had had an awesome first conference. I am very inspired about the things I learned there. I can feel there are a lot of things I still need to learn and I look forward to this! I got to speak with some interesting people and share laughs with others! I hope I can take some of the subjects I heard about and incorporate them into my work.&lt;/p&gt;

&lt;p&gt;This was all in all a good conference and an awesome experience!&lt;/p&gt;</content><author><name></name></author><summary type="html">Last week I attended my first ever C++ conference. It was the Meeting C++ conference in Berlin. The conference was very nicely planned with some good speakers and good topics. There were only a few minor details which was inconvinient. Below I will try to express some thoughts about the different talks I saw and about the conference in general.</summary></entry><entry><title type="html">Master thesis done - lessons learned</title><link href="https://madsravn.dk/posts/master-thesis-done-lessons-learned" rel="alternate" type="text/html" title="Master thesis done - lessons learned" /><published>2015-11-21T00:00:00+01:00</published><updated>2015-11-21T00:00:00+01:00</updated><id>https://madsravn.dk/posts/master-thesis-done-lessons-learned</id><content type="html" xml:base="https://madsravn.dk/posts/master-thesis-done-lessons-learned">&lt;p&gt;I graduated from Aarhus University with a degree in Computer Science this june. Now, I’m finally getting around to publishing my code (as I linked in my thesis). I thought that I would give a quick summary of the process of writing my thesis as well. You can find my thesis and the code I developed for my thesis &lt;a href=&quot;./../../BIS/index.html&quot;&gt;here&lt;/a&gt;. The title of my thesis is Orthogonal Range Searching in 2D with Ball Inheritance and my advisor was &lt;a href=&quot;https://cs.au.dk/~larsen/&quot;&gt;Kasper Green Larsen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before I started writing my thesis, I followed a course called Master Thesis Preparation by &lt;a href=&quot;https://cs.au.dk/~danvy/&quot;&gt;Olivier Danvy&lt;/a&gt;. He has advised for quite a few PhD students so far, so he certainly has a good experience with it. The course consisted of a lot of good tips, tricks and good stories (which is his modus operandi). One of the few things which really stuck with me was to remember an advisor has a limited amount of time for you and it is your responsibility to use it as best as possible. My advisor was awesome enough to read some of what I had written each time we met. And in order to maximize what I got from this, I always compiled a ‘diff-version’ of my thesis for him. A ‘diff-version’ was made using &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;latexdiff&lt;/code&gt;. Each time I handed something in, I saved the latex files for that version. Next time I handed something in, I would then run &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;latexdiff&lt;/code&gt; on the current version and what I handed in last time. With this it was easy to see what was removed, what was added and what was the same as last time he read it. This worked out pretty good.&lt;/p&gt;

&lt;p&gt;My thesis was half theoretical and half practical. So while I had to write some code and analyze some results, the actual written thesis was still the main focus. And we all know that writing code is funnier than writing a thesis. So I forced myself to write the draft for the introduction chapter and another chapter before I started coding. This way I did not get lost in just having fun coding and postpone the writing for later (where ‘later’ might too late).&lt;/p&gt;

&lt;p&gt;To conclude, remember to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Find tools to streamline your process.&lt;/li&gt;
  &lt;li&gt;Use the time of your advisor as best as possible. Invest some time to prepare for your meetings.&lt;/li&gt;
  &lt;li&gt;Focus on the important aspects of your thesis, and don’t get lost in what is interesting or fun.&lt;/li&gt;
  &lt;li&gt;Find yourself a book on writing.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">I graduated from Aarhus University with a degree in Computer Science this june. Now, I’m finally getting around to publishing my code (as I linked in my thesis). I thought that I would give a quick summary of the process of writing my thesis as well. You can find my thesis and the code I developed for my thesis here. The title of my thesis is Orthogonal Range Searching in 2D with Ball Inheritance and my advisor was Kasper Green Larsen.</summary></entry><entry><title type="html">What is better - Xbox One or Playstation 4?</title><link href="https://madsravn.dk/posts/what-is-better-xbox-or-playstation" rel="alternate" type="text/html" title="What is better - Xbox One or Playstation 4?" /><published>2013-11-19T00:00:00+01:00</published><updated>2013-11-19T00:00:00+01:00</updated><id>https://madsravn.dk/posts/what-is-better-xbox-or-playstation</id><content type="html" xml:base="https://madsravn.dk/posts/what-is-better-xbox-or-playstation">&lt;p&gt;With the two new consoles being released soon, there is a lot of hype about it online. There is a lot of articles online describing the differences in performance, games, design and usability - reading the comparisons of the consoles almost seems like a bigger time consumption than actually playing on the console.&lt;/p&gt;

&lt;p&gt;So I read all the posts and summarized it for you. Which console is the best? Here’s the answer:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://madsravn.dk/images/xboxplaystation.png&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">With the two new consoles being released soon, there is a lot of hype about it online. There is a lot of articles online describing the differences in performance, games, design and usability - reading the comparisons of the consoles almost seems like a bigger time consumption than actually playing on the console.</summary></entry><entry><title type="html">Simple image processing with CUDA</title><link href="https://madsravn.dk/posts/simple-image-processing-with-cuda" rel="alternate" type="text/html" title="Simple image processing with CUDA" /><published>2013-10-27T00:00:00+02:00</published><updated>2013-10-27T00:00:00+02:00</updated><id>https://madsravn.dk/posts/simple-image-processing-with-cuda</id><content type="html" xml:base="https://madsravn.dk/posts/simple-image-processing-with-cuda">&lt;p&gt;I like graphics and image processing. So I have been fiddling a little with NVIDIAs CUDA in order to capatilize on some multithreaded programming. I have made a little starter edition for people who wants to try forces with CUDA for image processing.&lt;/p&gt;

&lt;p&gt;I am using &lt;a href=&quot;https://lodev.org/lodepng/&quot;&gt;lodepng&lt;/a&gt; for loading and saving images for the filtering. It is very easy to easy, has no dependencies and just works. In my example code I am reading filenames for input and output images from the command line parameters.&lt;/p&gt;

&lt;p&gt;Enough talk, let’s see some code:&lt;/p&gt;

&lt;p&gt;In my &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;main.cpp&lt;/code&gt; file I load and save images and call the filter.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;int main(int argc, char** argv) {
    if(argc != 3) {
        std::cout &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Run&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;filenames.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;std::endl&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Read&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;arguments&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;char*&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;input_file = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;argv[1];&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;char*&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;output_file = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;argv[2];&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;std::vector&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; in_image;
    unsigned int width, height;

    // Load the data
    unsigned error = lodepng::decode(in_image, width, height, input_file);
    if(error) std::cout &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;decoder&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lodepng_error_text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;std::endl&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Prepare&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;char*&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;input_image = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in_image.size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;*3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)/4];&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;char*&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;output_image = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in_image.size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;*3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)/4];&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;where = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;i = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;in_image.size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+1)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;input_image[where] = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;in_image.at(i);&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;output_image[where] = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;255;&lt;/span&gt;
           &lt;span class=&quot;na&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;++;&lt;/span&gt;
       &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Run&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;it&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;input_image&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;output_image&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt; 

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Prepare&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;std::vector&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; out_image;
    for(int i = 0; i &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;in_image.size&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;out_image.push_back&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;output_image&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+1)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;out_image.push_back&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(255);&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Output&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;error = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;lodepng::encode(output_file,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;out_image&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;there&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;an&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;it&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;std::cout&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encoder&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lodepng_error_text&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;std::endl&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;input_image&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;output_image&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;0;&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We notice how easy lodepng is to use. We tell it we want our image loaded into our vector and voila, we have it. We then remove the alpha channel, as I was not using it in my project. You can however change it to your preferences. We then give our image data to the &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;filter&lt;/code&gt; function - this is the function which will load the data onto our GPU and call the CUDA kernel which runs our filter. We then save our image, clean up and exits.&lt;/p&gt;

&lt;p&gt;Now let’s look at some actual CUDA stuff. The code below resides in &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;kernels.cu&lt;/code&gt;. The CUDA compiler, nvcc, is sort of picky as to what filename extensions it will compile as what. For now, just let the name be.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt; void filter (unsigned char* input_image, unsigned char* output_image, int width, int height) {

    unsigned char* dev_input;
    unsigned char* dev_output;
    getError(cudaMalloc( (void**) &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;dev_input, width*height*3*sizeof(unsigned char)));
    getError(cudaMemcpy( dev_input, input_image, width*height*3*sizeof(unsigned char), cudaMemcpyHostToDevice ));
 
    getError(cudaMalloc( (void**) &lt;span class=&quot;err&quot;&gt;&amp;amp;&lt;/span&gt;dev_output, width*height*3*sizeof(unsigned char)));

    dim3 blockDims(512,1,1);
    dim3 gridDims((unsigned int) ceil((double)(width*height*3/blockDims.x)), 1, 1 );

    filter&lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gridDims&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;blockDims&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&amp;gt;&amp;gt;(dev_input, dev_output, width, height); 


    getError(cudaMemcpy(output_image, dev_output, width*height*3*sizeof(unsigned char), cudaMemcpyDeviceToHost ));

    getError(cudaFree(dev_input));
    getError(cudaFree(dev_output));

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We allocate and copy our data to the GPU. We need the data on the GPU for the kernels to be able to read it. We also allocate storage for the output image, so we have a place to write the result of the filter to. The «&amp;lt;»&amp;gt; is CUDA syntax and will be interpreted when compiled. It tells the compiler how many blocks and grids we are going to use. Mostly every CUDA function an enum &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;cudaError_t&lt;/code&gt; which is why every CUDA call is surrounded by &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;getError&lt;/code&gt;. This way we get an error printed to the screen if anything goes wrong. Don’t worry too much about it, you can see the code for it in &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;helpers.cpp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, let’s look at the actual filter, also located in &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;kernels.cu&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;syntax&quot;&gt;&lt;code&gt;__global__
void blur(unsigned char* input_image, unsigned char* output_image, int width, int height) {

    const unsigned int offset = blockIdx.x*blockDim.x + threadIdx.x;
    int x = offset % width;
    int y = (offset-x)/width;
    int fsize = 5; // Filter size
    if(offset &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;*height&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;na&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;output_red = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;output_green = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;output_blue = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;hits = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ox = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-fsize;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ox&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fsize&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+1;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ox&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;oy = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-fsize;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;oy&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;fsize&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+1;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;oy&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ox&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; -1 &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (x+ox) &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;oy&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; -1 &lt;span class=&quot;err&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (y+oy) &lt;span class=&quot;nt&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;currentoffset = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;(offset+ox+oy*width)*3;&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;output_red&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;input_image&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentoffset&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;];&lt;/span&gt; 
                    &lt;span class=&quot;na&quot;&gt;output_green&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;input_image&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentoffset&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+1];&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;output_blue&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;input_image&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentoffset&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+2];&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;hits&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;++;&lt;/span&gt;
                &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;output_image[offset*3] = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;output_red/hits;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;output_image&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;offset*3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+1&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;] = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;output_green/hits;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;output_image&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;offset*3&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;+2&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;] = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;output_blue/hits;&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again, the &lt;strong&gt;global&lt;/strong&gt; is a CUDA keyword. For each pixel in the input image we take the average of each of the neighbouring pixels and writes it to the output image. This filter is known as a Box blur. A better blur filter would be the Gaussian blur. I have written a Gaussian function in &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;helpers.cpp&lt;/code&gt; if you want to try. However, before doing that, just try to play around it and see what happens. I learn best from trial and error, and that is also why graphics and image processing is a subject I like - because you can see the result of your work in an easily understanded way instead of reading thousands of lines of output data.&lt;/p&gt;

&lt;p&gt;Notice that we check if our &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;offset&lt;/code&gt; is actually within the range of &lt;code class=&quot;language-html highlighter-rouge&quot;&gt;width*height&lt;/code&gt; because it can happen that it will be outside due to the blocks CUDA will run, so remember to keep that. Also we need to remember to check whether or not the pixel we read are actually in our image when doing the box blur as well. You can try to remove them one at a time and see what happens.&lt;/p&gt;

&lt;p&gt;So now, try running the program on an image and look at the output image. Blurred, huh?&lt;/p&gt;

&lt;p&gt;I have made a simple compile script for the project as well - it works for linux and MAC OSX. Under Windows I guess it’s pretty easy to get it up and running in Visual Studio as well. Good luck. &lt;a href=&quot;https://github.com/madsravn/easyCuda&quot;&gt; The code can be found on my github&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">I like graphics and image processing. So I have been fiddling a little with NVIDIAs CUDA in order to capatilize on some multithreaded programming. I have made a little starter edition for people who wants to try forces with CUDA for image processing.</summary></entry><entry><title type="html">Improving performance with packet tracing and other methods</title><link href="https://madsravn.dk/posts/final-handin-for-rendalg" rel="alternate" type="text/html" title="Improving performance with packet tracing and other methods" /><published>2013-04-10T00:00:00+02:00</published><updated>2013-04-10T00:00:00+02:00</updated><id>https://madsravn.dk/posts/final-handin-for-rendalg</id><content type="html" xml:base="https://madsravn.dk/posts/final-handin-for-rendalg">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;The subject I chose for final handin in the rendering algorithms course was improving the rendering time of a given scene, the Sponza scene as seen below. The scene consist of 66,454 triangles which are rather compact and from any given viewpoint pretty stacked - i.e. if you shoot a ray through a triangle you are pretty sure to hit at least a few other triangles either behind or in front of it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://madsravn.dk/images/mravn_sponza.png&quot; alt=&quot;sponza scene&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-methods&quot;&gt;The methods&lt;/h2&gt;

&lt;p&gt;Firstly I used an acceleration data structure to put all my geometry in a tree which can be traversed. An acceleration data structure is an improvement in itself, but with this tree it became possible to make some further improvements using packet tracing. Packet tracing is a method where you group some of your rays together and traverse the tree of the data structure with them packed instead of a single ray at a time. This way you don’t have to traverse many of the nodes of the tree so many times and you can also do some early miss testing by making a frustum of this group of rays and cheaply check if they all miss a bounding box with a single frustum/AABB intersection test instead of doing 16 to 512 ray/box intersection tests.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://madsravn.dk/images/mravn_ads.png&quot; alt=&quot;ads&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-results&quot;&gt;The results&lt;/h2&gt;

&lt;p&gt;I checked my implementation of packet tracing compared to the same scene with only early ray termination. I got these numbers&lt;/p&gt;

&lt;h3 id=&quot;normal-ray-tracing-with-early-ray-termination-yielded-the-following-results&quot;&gt;Normal ray tracing with early ray termination yielded the following results:&lt;/h3&gt;

&lt;p&gt;Did 6,503,630 triangle intersections&lt;/p&gt;

&lt;p&gt;Did 20,193,290 traversals&lt;/p&gt;

&lt;p&gt;Did 33,267,596 box intersections&lt;/p&gt;

&lt;h3 id=&quot;packet-tracing-with-a-packet-size-of-4x4&quot;&gt;Packet tracing with a packet size of 4x4:&lt;/h3&gt;

&lt;p&gt;Did 6,560,144 triangle intersections&lt;/p&gt;

&lt;p&gt;Did 1,877,640 traversals&lt;/p&gt;

&lt;p&gt;Did 11,500,952 box intersections&lt;/p&gt;

&lt;h3 id=&quot;packet-tracing-with-a-packet-size-of-8x8&quot;&gt;Packet tracing with a packet size of 8x8:&lt;/h3&gt;

&lt;p&gt;Did 9,904,128 triangle intersections&lt;/p&gt;

&lt;p&gt;Did 602,404 traversals&lt;/p&gt;

&lt;p&gt;Did 10,080,299 box intersections&lt;/p&gt;

&lt;h3 id=&quot;packet-tracing-with-a-packet-size-of-16x16&quot;&gt;Packet tracing with a packet size of 16x16:&lt;/h3&gt;

&lt;p&gt;Did 20,155,648 triangle intersections&lt;/p&gt;

&lt;p&gt;Did 248,074 traversals&lt;/p&gt;

&lt;p&gt;Did 10,991,985 box intersections&lt;/p&gt;

&lt;h2 id=&quot;path-tracing&quot;&gt;Path tracing&lt;/h2&gt;

&lt;p&gt;A part of the handin was also to implement either photon mapping or path tracing. I chose path tracing with 512 samples per pixel. The result can be seen here&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://madsravn.dk/images/teapot.pathtracing.png&quot; alt=&quot;pathtracing&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-conclusion&quot;&gt;The conclusion&lt;/h2&gt;

&lt;p&gt;This was a very fun project to work on and an exciting way to finish of a good course in rendering algorithms. I wish I could have had more time doing this project because I don’t think I was far from getting much better results using leaf traversal. As you can see on my numbers above the amount of ray/triangle intersection tests explode at packet size 16x16, while the traversal is pretty low.&lt;/p&gt;</content><author><name></name></author><summary type="html">Introduction</summary></entry></feed>